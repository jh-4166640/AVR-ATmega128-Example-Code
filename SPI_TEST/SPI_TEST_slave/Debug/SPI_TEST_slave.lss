
SPI_TEST_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000054e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  0080010c  0080010c  000005ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001708  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d8  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070b  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00002d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000523  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f09  00000000  00000000  000032eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000041f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	41 c0       	rjmp	.+130    	; 0xc8 <__vector_17>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 39       	cpi	r26, 0x90	; 144
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3b d0       	rcall	.+118    	; 0x13a <main>
  c4:	42 c2       	rjmp	.+1156   	; 0x54a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_17>:
	*out = qbuf[qhead];
	qhead = (uint8_t)((qhead + 1u) & Q_MASK);
	return (int)((qtail - qhead) & Q_MASK);
}

ISR(SPI_STC_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	SPI_REC_Char = SPDR;
  e0:	8f b1       	in	r24, 0x0f	; 15
  e2:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <SPI_REC_Char>
	enQue(SPI_REC_Char); // ÏàòÏã† Îêú Î¨∏Ïûê Ring bufferÏóê Ï†ÄÏû•
  e6:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <SPI_REC_Char>
static volatile uint8_t qhead = 0; // next to pop
static volatile uint8_t qtail = 0; // next to push
static volatile uint8_t q_highwater = 0; // for stats

static inline int enQue(uint8_t b){
	uint8_t next = (uint8_t)((qtail + 1u) & Q_MASK);
  ea:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <qtail>
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	8f 77       	andi	r24, 0x7F	; 127
	if(next == qhead) return -1; // full
  f2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <qhead>
  f6:	89 17       	cp	r24, r25
  f8:	a1 f0       	breq	.+40     	; 0x122 <__vector_17+0x5a>
	
	qbuf[qtail] = b;
  fa:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <qtail>
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	e1 5f       	subi	r30, 0xF1	; 241
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	20 83       	st	Z, r18
	qtail = next;
 106:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <qtail>
	uint8_t size = (uint8_t)((qtail - qhead) & Q_MASK);
 10a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <qtail>
 10e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <qhead>
 112:	89 1b       	sub	r24, r25
 114:	8f 77       	andi	r24, 0x7F	; 127
	if(size > q_highwater) q_highwater = size;
 116:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 11a:	98 17       	cp	r25, r24
 11c:	10 f4       	brcc	.+4      	; 0x122 <__vector_17+0x5a>
 11e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}

ISR(SPI_STC_vect){
	SPI_REC_Char = SPDR;
	enQue(SPI_REC_Char); // ÏàòÏã† Îêú Î¨∏Ïûê Ring bufferÏóê Ï†ÄÏû•
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <main>:

// Slave init (interrupt mode)
static inline void Init_SPI_Slave_IntContr(void)
{
    // MISO output in slave
    DDRB |= (1 << MISO);
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	87 bb       	out	0x17, r24	; 23

    // Enable SPI + SPI interrupt, Mode 1
    SPCR = (1<<SPIE) | (1<<SPE) | (1<<CPHA) | (3<<SPR0);
 140:	87 ec       	ldi	r24, 0xC7	; 199
 142:	8d b9       	out	0x0d, r24	; 13
	// SPCR¿ª ΩΩ∑π¿Ã∫Í INT µø¿€¿∏∑Œ √ ±‚»≠, ≈¨∑∞ : SCK = fosc/128
    SPSR = 0x00;
 144:	1e b8       	out	0x0e, r1	; 14
    sei();
 146:	78 94       	sei
    LCD_Delay(2);
}

static inline void LCD_PORT_Init(void)
{
    DDRA  = 0xFF;         // PORTA as output (data bus)
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	8a bb       	out	0x1a, r24	; 26
    LCD_CTRL_DDR |= 0x07; // PORTG bits 0..2 as output (E,RW,RS)
 14c:	e4 e6       	ldi	r30, 0x64	; 100
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	87 60       	ori	r24, 0x07	; 7
 154:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 156:	e5 e6       	ldi	r30, 0x65	; 101
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8b 7f       	andi	r24, 0xFB	; 251
 15e:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 166:	80 81       	ld	r24, Z
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	26 ef       	ldi	r18, 0xF6	; 246
 16e:	2a 95       	dec	r18
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x34>
    _delay_us(50);
    LCD_WINST = command;          // put command
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	8b bb       	out	0x1b, r24	; 27
 176:	86 ef       	ldi	r24, 0xF6	; 246
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x3e>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 17c:	80 81       	ld	r24, Z
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	80 83       	st	Z, r24
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	06 c0       	rjmp	.+12     	; 0x192 <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	e6 e6       	ldi	r30, 0x66	; 102
 188:	fe e0       	ldi	r31, 0x0E	; 14
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x50>
 18e:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 190:	89 2f       	mov	r24, r25
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	98 0f       	add	r25, r24
 196:	81 11       	cpse	r24, r1
 198:	f6 cf       	rjmp	.-20     	; 0x186 <main+0x4c>
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 19a:	e5 e6       	ldi	r30, 0x65	; 101
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 1a4:	80 81       	ld	r24, Z
 1a6:	8d 7f       	andi	r24, 0xFD	; 253
 1a8:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 1aa:	80 81       	ld	r24, Z
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	26 ef       	ldi	r18, 0xF6	; 246
 1b2:	2a 95       	dec	r18
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x78>
    _delay_us(50);
    LCD_WINST = command;          // put command
 1b6:	88 e3       	ldi	r24, 0x38	; 56
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	86 ef       	ldi	r24, 0xF6	; 246
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x82>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 1c0:	80 81       	ld	r24, Z
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	80 83       	st	Z, r24
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <main+0x9c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	e6 e6       	ldi	r30, 0x66	; 102
 1cc:	fe e0       	ldi	r31, 0x0E	; 14
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x94>
 1d2:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 1d4:	89 2f       	mov	r24, r25
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	98 0f       	add	r25, r24
 1da:	81 11       	cpse	r24, r1
 1dc:	f6 cf       	rjmp	.-20     	; 0x1ca <main+0x90>
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 1de:	e5 e6       	ldi	r30, 0x65	; 101
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 1e8:	80 81       	ld	r24, Z
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 1ee:	80 81       	ld	r24, Z
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	26 ef       	ldi	r18, 0xF6	; 246
 1f6:	2a 95       	dec	r18
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0xbc>
    _delay_us(50);
    LCD_WINST = command;          // put command
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	8b bb       	out	0x1b, r24	; 27
 1fe:	86 ef       	ldi	r24, 0xF6	; 246
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0xc6>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 204:	80 81       	ld	r24, Z
 206:	8e 7f       	andi	r24, 0xFE	; 254
 208:	80 83       	st	Z, r24
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	06 c0       	rjmp	.+12     	; 0x21a <main+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	e6 e6       	ldi	r30, 0x66	; 102
 210:	fe e0       	ldi	r31, 0x0E	; 14
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0xd8>
 216:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 218:	89 2f       	mov	r24, r25
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	98 0f       	add	r25, r24
 21e:	81 11       	cpse	r24, r1
 220:	f6 cf       	rjmp	.-20     	; 0x20e <main+0xd4>
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 222:	e5 e6       	ldi	r30, 0x65	; 101
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 22c:	80 81       	ld	r24, Z
 22e:	8d 7f       	andi	r24, 0xFD	; 253
 230:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 232:	80 81       	ld	r24, Z
 234:	81 60       	ori	r24, 0x01	; 1
 236:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	26 ef       	ldi	r18, 0xF6	; 246
 23a:	2a 95       	dec	r18
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x100>
    _delay_us(50);
    LCD_WINST = command;          // put command
 23e:	8e e0       	ldi	r24, 0x0E	; 14
 240:	8b bb       	out	0x1b, r24	; 27
 242:	86 ef       	ldi	r24, 0xF6	; 246
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x10a>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 248:	80 81       	ld	r24, Z
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	80 83       	st	Z, r24
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	06 c0       	rjmp	.+12     	; 0x25e <main+0x124>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	e6 e6       	ldi	r30, 0x66	; 102
 254:	fe e0       	ldi	r31, 0x0E	; 14
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x11c>
 25a:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 25c:	89 2f       	mov	r24, r25
 25e:	9f ef       	ldi	r25, 0xFF	; 255
 260:	98 0f       	add	r25, r24
 262:	81 11       	cpse	r24, r1
 264:	f6 cf       	rjmp	.-20     	; 0x252 <main+0x118>
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 266:	e5 e6       	ldi	r30, 0x65	; 101
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	8b 7f       	andi	r24, 0xFB	; 251
 26e:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 270:	80 81       	ld	r24, Z
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 276:	80 81       	ld	r24, Z
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	26 ef       	ldi	r18, 0xF6	; 246
 27e:	2a 95       	dec	r18
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x144>
    _delay_us(50);
    LCD_WINST = command;          // put command
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	8b bb       	out	0x1b, r24	; 27
 286:	86 ef       	ldi	r24, 0xF6	; 246
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x14e>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 28c:	80 81       	ld	r24, Z
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	80 83       	st	Z, r24
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <main+0x168>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	e6 e6       	ldi	r30, 0x66	; 102
 298:	fe e0       	ldi	r31, 0x0E	; 14
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x160>
 29e:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 2a0:	89 2f       	mov	r24, r25
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	98 0f       	add	r25, r24
 2a6:	81 11       	cpse	r24, r1
 2a8:	f6 cf       	rjmp	.-20     	; 0x296 <main+0x15c>
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 2aa:	e5 e6       	ldi	r30, 0x65	; 101
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8b 7f       	andi	r24, 0xFB	; 251
 2b2:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 2b4:	80 81       	ld	r24, Z
 2b6:	8d 7f       	andi	r24, 0xFD	; 253
 2b8:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 2ba:	80 81       	ld	r24, Z
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	26 ef       	ldi	r18, 0xF6	; 246
 2c2:	2a 95       	dec	r18
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x188>
    _delay_us(50);
    LCD_WINST = command;          // put command
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	86 ef       	ldi	r24, 0xF6	; 246
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x192>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 2d0:	80 81       	ld	r24, Z
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	80 83       	st	Z, r24
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <main+0x1ac>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	e6 e6       	ldi	r30, 0x66	; 102
 2dc:	fe e0       	ldi	r31, 0x0E	; 14
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x1a4>
 2e2:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 2e4:	89 2f       	mov	r24, r25
 2e6:	9f ef       	ldi	r25, 0xFF	; 255
 2e8:	98 0f       	add	r25, r24
 2ea:	81 11       	cpse	r24, r1
 2ec:	f6 cf       	rjmp	.-20     	; 0x2da <main+0x1a0>
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 2ee:	e5 e6       	ldi	r30, 0x65	; 101
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 2f8:	80 81       	ld	r24, Z
 2fa:	8d 7f       	andi	r24, 0xFD	; 253
 2fc:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 2fe:	80 81       	ld	r24, Z
 300:	81 60       	ori	r24, 0x01	; 1
 302:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	26 ef       	ldi	r18, 0xF6	; 246
 306:	2a 95       	dec	r18
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0x1cc>
    _delay_us(50);
    LCD_WINST = command;          // put command
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	8b bb       	out	0x1b, r24	; 27
 30e:	86 ef       	ldi	r24, 0xF6	; 246
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x1d6>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 314:	80 81       	ld	r24, Z
 316:	8e 7f       	andi	r24, 0xFE	; 254
 318:	80 83       	st	Z, r24
 31a:	a0 e0       	ldi	r26, 0x00	; 0
 31c:	b1 e0       	ldi	r27, 0x01	; 1
 31e:	22 c0       	rjmp	.+68     	; 0x364 <main+0x22a>
}

static inline void LCD_Str(const char *str)
{
    while (*str != 0) {
        LCD_Char((uint8_t)*str++);
 320:	11 96       	adiw	r26, 0x01	; 1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	06 c0       	rjmp	.+12     	; 0x332 <main+0x1f8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	e6 e6       	ldi	r30, 0x66	; 102
 328:	fe e0       	ldi	r31, 0x0E	; 14
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x1f0>
 32e:	00 00       	nop
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 330:	82 2f       	mov	r24, r18
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	28 0f       	add	r18, r24
 336:	81 11       	cpse	r24, r1
 338:	f6 cf       	rjmp	.-20     	; 0x326 <main+0x1ec>
static inline void LCD_Cursor_Shift(uint8_t p);
static inline void LCD_Cursor_Home(void);

static inline void LCD_Data(uint8_t ch)
{
    LCD_CTRL |= (1 << LCD_RS);    // RS=1 -> data
 33a:	e5 e6       	ldi	r30, 0x65	; 101
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	84 60       	ori	r24, 0x04	; 4
 342:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 344:	80 81       	ld	r24, Z
 346:	8d 7f       	andi	r24, 0xFD	; 253
 348:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 34a:	80 81       	ld	r24, Z
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 350:	26 ef       	ldi	r18, 0xF6	; 246
 352:	2a 95       	dec	r18
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x218>
    _delay_us(50);
    LCD_WDATA = ch;               // put data
 356:	9b bb       	out	0x1b, r25	; 27
 358:	86 ef       	ldi	r24, 0xF6	; 246
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <main+0x220>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 35e:	80 81       	ld	r24, Z
 360:	8e 7f       	andi	r24, 0xFE	; 254
 362:	80 83       	st	Z, r24
    LCD_Data(ch);
}

static inline void LCD_Str(const char *str)
{
    while (*str != 0) {
 364:	9c 91       	ld	r25, X
 366:	91 11       	cpse	r25, r1
 368:	db cf       	rjmp	.-74     	; 0x320 <main+0x1e6>
	uint8_t Rx_data = 0;			// Ring bufferÏóêÏÑú Í∫ºÎÇ¥ÏÑú Ï†ÄÏû•Ìï† Î≥ÄÏàò
	int Rx_res = 0;					// deque Í≤∞Í≥º Ï†ÄÏû•Ïö©
    Init_SPI_Slave_IntContr();
	LCD_Init();
	LCD_Pos(0,0); LCD_Str("Slave Rec: ");
	sei();
 36a:	78 94       	sei

int main(void)
{
	uint8_t lcd_row=0, lcd_col=12;	// LCD Pos Ï†úÏñ¥Ïö© 
	uint8_t Rx_Str_mode = 0;		// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®Îìú ÌôïÏù∏Ïö© Î≥ÄÏàò
	uint8_t Rx_data = 0;			// Ring bufferÏóêÏÑú Í∫ºÎÇ¥ÏÑú Ï†ÄÏû•Ìï† Î≥ÄÏàò
 36c:	30 e0       	ldi	r19, 0x00	; 0
}

int main(void)
{
	uint8_t lcd_row=0, lcd_col=12;	// LCD Pos Ï†úÏñ¥Ïö© 
	uint8_t Rx_Str_mode = 0;		// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®Îìú ÌôïÏù∏Ïö© Î≥ÄÏàò
 36e:	60 e0       	ldi	r22, 0x00	; 0
	enQue(SPI_REC_Char); // ÏàòÏã† Îêú Î¨∏Ïûê Ring bufferÏóê Ï†ÄÏû•
}

int main(void)
{
	uint8_t lcd_row=0, lcd_col=12;	// LCD Pos Ï†úÏñ¥Ïö© 
 370:	4c e0       	ldi	r20, 0x0C	; 12
 372:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t size = (uint8_t)((qtail - qhead) & Q_MASK);
	if(size > q_highwater) q_highwater = size;
	return (int)size;
}
static inline int deQue(uint8_t* out){
	if(qhead == qtail) return -1; // empty
 374:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <qhead>
 378:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <qtail>
 37c:	98 17       	cp	r25, r24
 37e:	b1 f0       	breq	.+44     	; 0x3ac <main+0x272>
	*out = qbuf[qhead];
 380:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <qhead>
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	e1 5f       	subi	r30, 0xF1	; 241
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	30 81       	ld	r19, Z
	qhead = (uint8_t)((qhead + 1u) & Q_MASK);
 38c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <qhead>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	8f 77       	andi	r24, 0x7F	; 127
 394:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <qhead>
	return (int)((qtail - qhead) & Q_MASK);
 398:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <qtail>
 39c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <qhead>
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	82 1b       	sub	r24, r18
 3a4:	91 09       	sbc	r25, r1
 3a6:	8f 77       	andi	r24, 0x7F	; 127
 3a8:	99 27       	eor	r25, r25
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <main+0x276>
	uint8_t size = (uint8_t)((qtail - qhead) & Q_MASK);
	if(size > q_highwater) q_highwater = size;
	return (int)size;
}
static inline int deQue(uint8_t* out){
	if(qhead == qtail) return -1; // empty
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	9f ef       	ldi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b0:	ef ef       	ldi	r30, 0xFF	; 255
 3b2:	ff e8       	ldi	r31, 0x8F	; 143
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x27a>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x280>
 3ba:	00 00       	nop
	sei();
    while (1) 
    {
		Rx_res=deQue(&Rx_data);
		_delay_ms(10);
		if(Rx_res>-1)			// ring bufferÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎã§Î©¥
 3bc:	99 23       	and	r25, r25
 3be:	d4 f2       	brlt	.-76     	; 0x374 <main+0x23a>
		{
			if(Rx_data == STR_SIGN)		// ÏàòÏã†Îêú Î¨∏ÏûêÍ∞Ä Î¨∏ÏûêÏó¥ Ï†ÑÏÜ° ÏãúÏûë Î¨∏ÏûêÏùº Í≤ΩÏö∞
 3c0:	3e 3e       	cpi	r19, 0xEE	; 238
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <main+0x28c>
 3c4:	71 c0       	rjmp	.+226    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			{
				Rx_Str_mode = 1;		// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®ÎìúÎ°ú Ï†ÑÌôò 
				Rx_data=' ';			// Ï†úÏñ¥Ïö© Î¨∏Ïûê Îç∞Ïù¥ÌÑ∞ ÎπÑÏö∞Í∏∞
				lcd_col=11;				
				lcd_row=0;
			} else if(Rx_data == CR) { // ÏàòÏã†Îêú Î¨∏ÏûêÍ∞Ä Î¨∏ÏûêÏó¥ Ï†ÑÏÜ° Ï¢ÖÎ£å Î¨∏ÏûêÏùº Í≤ΩÏö∞
 3c6:	3d 30       	cpi	r19, 0x0D	; 13
 3c8:	09 f0       	breq	.+2      	; 0x3cc <main+0x292>
 3ca:	72 c0       	rjmp	.+228    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 3cc:	ff ef       	ldi	r31, 0xFF	; 255
 3ce:	2f e7       	ldi	r18, 0x7F	; 127
 3d0:	84 e0       	ldi	r24, 0x04	; 4
 3d2:	f1 50       	subi	r31, 0x01	; 1
 3d4:	20 40       	sbci	r18, 0x00	; 0
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x298>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x2a2>
 3dc:	00 00       	nop
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 3de:	e5 e6       	ldi	r30, 0x65	; 101
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	8b 7f       	andi	r24, 0xFB	; 251
 3e6:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 3e8:	80 81       	ld	r24, Z
 3ea:	8d 7f       	andi	r24, 0xFD	; 253
 3ec:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 3ee:	80 81       	ld	r24, Z
 3f0:	81 60       	ori	r24, 0x01	; 1
 3f2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f4:	96 ef       	ldi	r25, 0xF6	; 246
 3f6:	9a 95       	dec	r25
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <main+0x2bc>
    _delay_us(50);
    LCD_WINST = command;          // put command
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	26 ef       	ldi	r18, 0xF6	; 246
 400:	2a 95       	dec	r18
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 404:	80 81       	ld	r24, Z
 406:	8e 7f       	andi	r24, 0xFE	; 254
 408:	80 83       	st	Z, r24
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	06 c0       	rjmp	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40e:	e6 e6       	ldi	r30, 0x66	; 102
 410:	fe e0       	ldi	r31, 0x0E	; 14
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 418:	89 2f       	mov	r24, r25
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	98 0f       	add	r25, r24
 41e:	81 11       	cpse	r24, r1
 420:	f6 cf       	rjmp	.-20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 422:	e5 e6       	ldi	r30, 0x65	; 101
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	8b 7f       	andi	r24, 0xFB	; 251
 42a:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 42c:	80 81       	ld	r24, Z
 42e:	8d 7f       	andi	r24, 0xFD	; 253
 430:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 432:	80 81       	ld	r24, Z
 434:	81 60       	ori	r24, 0x01	; 1
 436:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	26 ef       	ldi	r18, 0xF6	; 246
 43a:	2a 95       	dec	r18
 43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    _delay_us(50);
    LCD_WINST = command;          // put command
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	8b bb       	out	0x1b, r24	; 27
 442:	86 ef       	ldi	r24, 0xF6	; 246
 444:	8a 95       	dec	r24
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 448:	80 81       	ld	r24, Z
 44a:	8e 7f       	andi	r24, 0xFE	; 254
 44c:	80 83       	st	Z, r24
 44e:	a0 e0       	ldi	r26, 0x00	; 0
 450:	b1 e0       	ldi	r27, 0x01	; 1
 452:	22 c0       	rjmp	.+68     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
}

static inline void LCD_Str(const char *str)
{
    while (*str != 0) {
        LCD_Char((uint8_t)*str++);
 454:	11 96       	adiw	r26, 0x01	; 1
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45a:	e6 e6       	ldi	r30, 0x66	; 102
 45c:	fe e0       	ldi	r31, 0x0E	; 14
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 462:	00 00       	nop
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 464:	82 2f       	mov	r24, r18
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	28 0f       	add	r18, r24
 46a:	81 11       	cpse	r24, r1
 46c:	f6 cf       	rjmp	.-20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
static inline void LCD_Cursor_Shift(uint8_t p);
static inline void LCD_Cursor_Home(void);

static inline void LCD_Data(uint8_t ch)
{
    LCD_CTRL |= (1 << LCD_RS);    // RS=1 -> data
 46e:	e5 e6       	ldi	r30, 0x65	; 101
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	84 60       	ori	r24, 0x04	; 4
 476:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 478:	80 81       	ld	r24, Z
 47a:	8d 7f       	andi	r24, 0xFD	; 253
 47c:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 47e:	80 81       	ld	r24, Z
 480:	81 60       	ori	r24, 0x01	; 1
 482:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 484:	26 ef       	ldi	r18, 0xF6	; 246
 486:	2a 95       	dec	r18
 488:	f1 f7       	brne	.-4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
    _delay_us(50);
    LCD_WDATA = ch;               // put data
 48a:	9b bb       	out	0x1b, r25	; 27
 48c:	86 ef       	ldi	r24, 0xF6	; 246
 48e:	8a 95       	dec	r24
 490:	f1 f7       	brne	.-4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 492:	80 81       	ld	r24, Z
 494:	8e 7f       	andi	r24, 0xFE	; 254
 496:	80 83       	st	Z, r24
    LCD_Data(ch);
}

static inline void LCD_Str(const char *str)
{
    while (*str != 0) {
 498:	9c 91       	ld	r25, X
 49a:	91 11       	cpse	r25, r1
 49c:	db cf       	rjmp	.-74     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				lcd_col=12;	
				lcd_row=0;
				_delay_ms(100);
				LCD_Clear();
				LCD_Pos(0,0); LCD_Str("Slave Rec: ");
				Rx_data=' ';			// Ï†úÏñ¥Ïö© Î¨∏Ïûê Ï†úÍ±∞
 49e:	30 e2       	ldi	r19, 0x20	; 32
				Rx_Str_mode = 1;		// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®ÎìúÎ°ú Ï†ÑÌôò 
				Rx_data=' ';			// Ï†úÏñ¥Ïö© Î¨∏Ïûê Îç∞Ïù¥ÌÑ∞ ÎπÑÏö∞Í∏∞
				lcd_col=11;				
				lcd_row=0;
			} else if(Rx_data == CR) { // ÏàòÏã†Îêú Î¨∏ÏûêÍ∞Ä Î¨∏ÏûêÏó¥ Ï†ÑÏÜ° Ï¢ÖÎ£å Î¨∏ÏûêÏùº Í≤ΩÏö∞
				Rx_Str_mode = 0;		// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®Îìú Ìï¥Ï†ú
 4a0:	60 e0       	ldi	r22, 0x00	; 0
				lcd_col=12;	
 4a2:	4c e0       	ldi	r20, 0x0C	; 12
				lcd_row=0;
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		if(Rx_res>-1)			// ring bufferÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎã§Î©¥
		{
			if(Rx_data == STR_SIGN)		// ÏàòÏã†Îêú Î¨∏ÏûêÍ∞Ä Î¨∏ÏûêÏó¥ Ï†ÑÏÜ° ÏãúÏûë Î¨∏ÏûêÏùº Í≤ΩÏö∞
			{
				Rx_Str_mode = 1;		// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®ÎìúÎ°ú Ï†ÑÌôò 
				Rx_data=' ';			// Ï†úÏñ¥Ïö© Î¨∏Ïûê Îç∞Ïù¥ÌÑ∞ ÎπÑÏö∞Í∏∞
 4a8:	30 e2       	ldi	r19, 0x20	; 32
		_delay_ms(10);
		if(Rx_res>-1)			// ring bufferÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎã§Î©¥
		{
			if(Rx_data == STR_SIGN)		// ÏàòÏã†Îêú Î¨∏ÏûêÍ∞Ä Î¨∏ÏûêÏó¥ Ï†ÑÏÜ° ÏãúÏûë Î¨∏ÏûêÏùº Í≤ΩÏö∞
			{
				Rx_Str_mode = 1;		// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®ÎìúÎ°ú Ï†ÑÌôò 
 4aa:	61 e0       	ldi	r22, 0x01	; 1
				Rx_data=' ';			// Ï†úÏñ¥Ïö© Î¨∏Ïûê Îç∞Ïù¥ÌÑ∞ ÎπÑÏö∞Í∏∞
				lcd_col=11;				
 4ac:	4b e0       	ldi	r20, 0x0B	; 11
				lcd_row=0;
 4ae:	50 e0       	ldi	r21, 0x00	; 0
				_delay_ms(100);
				LCD_Clear();
				LCD_Pos(0,0); LCD_Str("Slave Rec: ");
				Rx_data=' ';			// Ï†úÏñ¥Ïö© Î¨∏Ïûê Ï†úÍ±∞
			}
			if(Rx_Str_mode){			// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®Îìú
 4b0:	66 23       	and	r22, r22
 4b2:	21 f0       	breq	.+8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				lcd_col++;
 4b4:	4f 5f       	subi	r20, 0xFF	; 255
				if(lcd_col >=16)
 4b6:	40 31       	cpi	r20, 0x10	; 16
 4b8:	20 f4       	brcc	.+8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				{
					lcd_col=0;
					lcd_row=1;
				}
			} else {					// Î¨∏Ïûê ÏàòÏã† Î™®Îìú
				lcd_col=12;
 4bc:	4c e0       	ldi	r20, 0x0C	; 12
				lcd_row=0;
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			}
			if(Rx_Str_mode){			// Î¨∏ÏûêÏó¥ ÏàòÏã† Î™®Îìú
				lcd_col++;
				if(lcd_col >=16)
				{
					lcd_col=0;
 4c2:	40 e0       	ldi	r20, 0x00	; 0
					lcd_row=1;
 4c4:	51 e0       	ldi	r21, 0x01	; 1
}

static inline void LCD_Pos(uint8_t x, uint8_t y)
{
    // x: row (0..1), y: column (0..15)
    LCD_Comm(0x80 | (x*0x40 + y));
 4c6:	84 2f       	mov	r24, r20
 4c8:	90 e4       	ldi	r25, 0x40	; 64
 4ca:	59 9f       	mul	r21, r25
 4cc:	80 0d       	add	r24, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	80 68       	ori	r24, 0x80	; 128
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
}

static inline void LCD_Comm(uint8_t command)
{
    LCD_CTRL &= ~(1 << LCD_RS);   // RS=0 -> command
 4d2:	e5 e6       	ldi	r30, 0x65	; 101
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	90 81       	ld	r25, Z
 4d8:	9b 7f       	andi	r25, 0xFB	; 251
 4da:	90 83       	st	Z, r25
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 4dc:	90 81       	ld	r25, Z
 4de:	9d 7f       	andi	r25, 0xFD	; 253
 4e0:	90 83       	st	Z, r25
    LCD_CTRL |= (1 << LCD_EN);    // E high
 4e2:	90 81       	ld	r25, Z
 4e4:	91 60       	ori	r25, 0x01	; 1
 4e6:	90 83       	st	Z, r25
 4e8:	26 ef       	ldi	r18, 0xF6	; 246
 4ea:	2a 95       	dec	r18
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
    _delay_us(50);
    LCD_WINST = command;          // put command
 4ee:	8b bb       	out	0x1b, r24	; 27
 4f0:	86 ef       	ldi	r24, 0xF6	; 246
 4f2:	8a 95       	dec	r24
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 4f6:	80 81       	ld	r24, Z
 4f8:	8e 7f       	andi	r24, 0xFE	; 254
 4fa:	80 83       	st	Z, r24
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 500:	e6 e6       	ldi	r30, 0x66	; 102
 502:	fe e0       	ldi	r31, 0x0E	; 14
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 508:	00 00       	nop
}

static inline void LCD_Delay(uint8_t ms)
{
    while (ms--) _delay_ms(1);
 50a:	89 2f       	mov	r24, r25
 50c:	9f ef       	ldi	r25, 0xFF	; 255
 50e:	98 0f       	add	r25, r24
 510:	81 11       	cpse	r24, r1
 512:	f6 cf       	rjmp	.-20     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
static inline void LCD_Cursor_Shift(uint8_t p);
static inline void LCD_Cursor_Home(void);

static inline void LCD_Data(uint8_t ch)
{
    LCD_CTRL |= (1 << LCD_RS);    // RS=1 -> data
 514:	e5 e6       	ldi	r30, 0x65	; 101
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	84 60       	ori	r24, 0x04	; 4
 51c:	80 83       	st	Z, r24
    LCD_CTRL &= ~(1 << LCD_RW);   // RW=0 -> write
 51e:	80 81       	ld	r24, Z
 520:	8d 7f       	andi	r24, 0xFD	; 253
 522:	80 83       	st	Z, r24
    LCD_CTRL |= (1 << LCD_EN);    // E high
 524:	80 81       	ld	r24, Z
 526:	81 60       	ori	r24, 0x01	; 1
 528:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52a:	26 ef       	ldi	r18, 0xF6	; 246
 52c:	2a 95       	dec	r18
 52e:	f1 f7       	brne	.-4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
    _delay_us(50);
    LCD_WDATA = ch;               // put data
 530:	3b bb       	out	0x1b, r19	; 27
 532:	86 ef       	ldi	r24, 0xF6	; 246
 534:	8a 95       	dec	r24
 536:	f1 f7       	brne	.-4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
    _delay_us(50);
    LCD_CTRL &= ~(1 << LCD_EN);   // E low
 538:	80 81       	ld	r24, Z
 53a:	8e 7f       	andi	r24, 0xFE	; 254
 53c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53e:	e6 e6       	ldi	r30, 0x66	; 102
 540:	fe e0       	ldi	r31, 0x0E	; 14
 542:	31 97       	sbiw	r30, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 546:	00 00       	nop
 548:	15 cf       	rjmp	.-470    	; 0x374 <main+0x23a>

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
